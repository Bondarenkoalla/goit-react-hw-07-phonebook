{"version":3,"sources":["redux/actions.js","redux/reduser.js","redux/store.js","redux/operations.js","redux/selectors.js","Components/Form/Form.js","Components/Finder/Finder.js","Components/FormItem/FormItem.js","Components/FormList/FormList.js","App.js","index.js","Components/Form/Form.module.css"],"names":["fetchContactRequest","createAction","fetchContactSuccess","fetchContactError","addContactRequest","addContactSuccsess","addContacError","deleteContactRequest","deleteContactSuccsess","deleteContacError","clearError","filterContacts","loading","createReducer","error","_","payload","items","state","filter","id","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contacts","devTools","process","axios","defaults","baseURL","name","number","dispatch","contact","post","then","data","catch","delete","a","get","getItems","getFilter","getLoading","getError","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","includes","Form","onInputChange","event","setState","currentTarget","value","onInputTelChange","onFormSubmit","props","some","alert","preventDefault","onSubmitProp","reset","this","inputId","uuidv4","onSubmit","className","styles","form","htmlFor","form_item","type","onChange","pattern","title","required","button","Component","connect","contactsSelectors","operations","e","actions","FormItem","deleteItem","onClick","contactsOperations","map","App","fetchContacts","isLoadingContacts","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.827a3476.chunk.js","sourcesContent":["// import { v4 as uuidv4 } from \"uuid\";\r\nimport { createAction } from \"@reduxjs/toolkit\";\r\n\r\nexport const fetchContactRequest = createAction(\"fetchContactRequest\");\r\nexport const fetchContactSuccess = createAction(\"fetchContactSuccess\");\r\nexport const fetchContactError = createAction(\"fetchContactError\");\r\n\r\n// export const addContactRequest = createAction(\"contactsRequest\");\r\nexport const addContactRequest = createAction(\"addContactsRequest\");\r\nexport const addContactSuccsess = createAction(\"addContactSuccsess\");\r\nexport const addContacError = createAction(\"addContactError\");\r\n\r\n\r\n// export const deleteContact = createAction(\"DELETE_CONTACT\");\r\nexport const deleteContactRequest = createAction(\"deleteContactsRequest\");\r\nexport const deleteContactSuccsess = createAction(\"deleteContactSuccsess\");\r\nexport const deleteContacError = createAction(\"deleteContactError\");\r\n\r\nexport const clearError = createAction('contacts/clearError');\r\nexport const filterContacts = createAction(\"FITER_CONTACTS\");\r\n\r\n// const addContact = createAction(\"ADD_CONTACT\", (name, number) => {\r\n//   return {\r\n//     payload: {\r\n//       name,\r\n//       number,\r\n//     },\r\n//   };\r\n// });\r\n\r\n// redux\r\n\r\n// const addContact = (name, number) => {\r\n//     return {\r\n//         type: 'ADD_CONTACT',\r\n//         payload: { id: uuidv4(), name, number }\r\n//     }\r\n// };\r\n// const deleteContact = (contactId) => {\r\n//     return {\r\n//         type: 'DELETE_CONTACT',\r\n//         payload: contactId\r\n//     }\r\n// };\r\n// const filterContacts = (filter) => {\r\n\r\n//     return {\r\n//         type: 'FITER_CONTACTS',\r\n//         payload: filter\r\n//     }\r\n// }\r\n// export default {\r\n//   deleteContact,\r\n//   filterContacts,\r\n//   addContactRequest,\r\n//   addContacSuccsess,\r\n//   addContacError,\r\n// };\r\n","import { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport {\r\n  addContactRequest,\r\n  addContactSuccsess,\r\n  addContacError,\r\n  deleteContactRequest,\r\n  deleteContactSuccsess,\r\n  deleteContacError,\r\n  filterContacts,\r\n  fetchContactRequest,\r\n  fetchContactSuccess,\r\n    fetchContactError,\r\n  clearError\r\n} from \"./actions\";\r\n\r\nconst loading = createReducer(false, {\r\n  [fetchContactRequest]: () => true,\r\n  [fetchContactSuccess]: () => false,\r\n  [fetchContactError]: () => false,\r\n\r\n  [addContactRequest]: () => true,\r\n  [addContactSuccsess]: () => false,\r\n  [addContacError]: () => false,\r\n  [deleteContactRequest]: () => true,\r\n  [deleteContactSuccsess]: () => false,\r\n  [deleteContacError]: () => false,\r\n});\r\nconst error = createReducer(null, {\r\n  [fetchContactError]: (_, { payload }) => payload,\r\n  [addContacError]: (_, { payload }) => payload,\r\n  [deleteContacError]:  (_, { payload }) => payload,\r\n  [clearError]: () => null,\r\n});\r\n\r\nconst items = createReducer([], {\r\n  [fetchContactSuccess]: (_, { payload }) => payload,\r\n  [addContactSuccsess]: (state, { payload }) => [...state, payload],\r\n  [deleteContactSuccsess]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer(\"\", {\r\n  [filterContacts]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({ items, filter, loading,error });\r\n// redux\r\n// const items = (state = [], { type, payload }) => {\r\n//     switch (type) {\r\n//         case 'ADD_CONTACT': return [...state, payload];\r\n//         case 'DELETE_CONTACT': console.log('state', state); return state.filter(({ id }) => id !== payload);\r\n\r\n//         default: return state;\r\n//     }\r\n// };\r\n// const filter = (state = '', { type, payload }) => {\r\n//     console.log(payload);\r\n//     switch (type) {\r\n//         case 'FITER_CONTACTS': return payload;\r\n//         default: return state;\r\n//     }\r\n// };\r\n","// import { createStore } from \"redux\";\r\n// import { composeWithDevTools } from \"redux-devtools-extension\"\r\nimport { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport logger from 'redux-logger'\r\nimport {\r\n    // persistStore,\r\n    // persistReducer,\r\n    FLUSH,\r\n    REHYDRATE,\r\n    PAUSE,\r\n    PERSIST,\r\n    PURGE,\r\n    REGISTER,\r\n} from 'redux-persist'\r\n// import storage from 'redux-persist/lib/storage'\r\nimport reducer from \"./reduser\";\r\n\r\nconst middleware = [\r\n    ...getDefaultMiddleware({\r\n        serializableCheck: {\r\n            ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n        },\r\n    }), logger,\r\n];\r\n\r\n\r\n// const contactsPersistConfig = {\r\n//     key: 'contacts',\r\n//     storage,\r\n//     blacklist: ['filter'],\r\n// };\r\n\r\n// const store = createStore(reduser, composeWithDevTools());\r\nconst store = configureStore({\r\n    reducer: {\r\n        contacts: reducer,\r\n    },\r\n    middleware,\r\n    devTools: process.env.NODE_ENV === 'development'\r\n});\r\n\r\n// const persistor = persistStore(store);\r\n\r\nexport default  store;\r\n","import axios from \"axios\";\r\nimport {\r\n  addContactSuccsess,\r\n  addContacError,\r\n  addContactRequest,\r\n  deleteContactRequest,\r\n  deleteContactSuccsess,\r\n  deleteContacError,\r\n  fetchContactRequest,\r\n  fetchContactSuccess,\r\n  fetchContactError,\r\n} from \"./actions\";\r\n\r\naxios.defaults.baseURL = \"http://localhost:4040\";\r\nconst fetchContacts = () => async dispatch => {\r\n    dispatch(fetchContactRequest());\r\n    try {\r\n        const { data } = await axios.get(\"/contacts\");\r\n        dispatch(fetchContactSuccess(data))\r\n    }\r\n    catch (error) { dispatch(fetchContactError(error)) }\r\n};\r\n    \r\n\r\n// const fetchContacts = () => (dispatch) => {\r\n//   dispatch(fetchContactRequest());\r\n//   axios\r\n//     .get(\"/contacts\")\r\n//     .then(({ data }) => dispatch(fetchContactSuccess(data)))\r\n//     .catch((error) => dispatch(fetchContactError(error)));\r\n// };\r\n\r\nconst addContact = (name, number) => (dispatch) => {\r\n  const contact = {\r\n    name,\r\n    number,\r\n  };\r\n  dispatch(addContactRequest());\r\n  axios\r\n    .post(\"/contacts\", contact)\r\n    .then(({ data }) => dispatch(addContactSuccsess(data)))\r\n    .catch((error) => dispatch(addContacError(error)));\r\n};\r\n\r\nconst deleteContact = (id) => (dispatch) => {\r\n  dispatch(deleteContactRequest());\r\n  axios\r\n    .delete(`/contacts/${id}`)\r\n    .then(() => dispatch(deleteContactSuccsess(id)))\r\n    .catch((error) => dispatch(deleteContacError(error)));\r\n};\r\n\r\nexport default { addContact, deleteContact, fetchContacts };\r\n","import { createSelector } from \"@reduxjs/toolkit\";\r\n\r\nconst getLoading = (state) => state.contacts.loading;\r\nconst getError = (state) => state.contacts.error;\r\nconst getItems = (state) => state.contacts.items;\r\nconst getFilter = (state) => state.contacts.filter;\r\n\r\n// const getVisibleContacts = state => {\r\n//     const items = getItems(state);\r\n//     const filter = getFilter(state);\r\n//     const normalizedFilter = filter.toLowerCase();\r\n//  return items.filter(({ name }) => name.toLowerCase().includes(normalizedFilter))\r\n// }\r\n\r\nconst getVisibleContacts = createSelector(\r\n  [getItems, getFilter],\r\n  (items, filter) => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n    return items.filter(({ name }) =>\r\n      name.toLowerCase().includes(normalizedFilter)\r\n    );\r\n  }\r\n);\r\n\r\nexport default {\r\n  getLoading,\r\n  getError,\r\n  getItems,\r\n  getFilter,\r\n  getVisibleContacts,\r\n};\r\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n// import actions from \"../../redux/actions\"\nimport operations from \"../../redux/operations\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./Form.module.css\";\nimport contactsSelectors from \"../../redux/selectors\"\nclass Form extends Component {\n  state = {\n    name: \"\",\n    number: \"\",\n  };\n\n  reset() {\n    this.setState({ name: \"\", number: \"\" });\n  }\n\n  onInputChange = (event) => {\n    this.setState({ name: event.currentTarget.value });\n  };\n  onInputTelChange = (event) => {\n    this.setState({ number: event.currentTarget.value });\n  };\n\n  onFormSubmit = (event) => {\n    const { name } = this.state;\n    const isAlreadyInContacts = this.props.contacts.some(\n      (contact) => contact.name === name\n    );\n    if (isAlreadyInContacts) {\n      alert(\"Контакт с таким именем уже есть\");\n      return;\n    }\n    event.preventDefault();\n    this.props.onSubmitProp(this.state.name, this.state.number);\n    this.reset();\n  };\n\n  render() {\n    const inputId = uuidv4();\n    return (\n      <form onSubmit={this.onFormSubmit} className={styles.form}>\n        <label htmlFor={inputId} className={styles.form_item}>\n          Name:\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={this.state.name}\n            id={inputId}\n            onChange={this.onInputChange}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n          />\n        </label>\n\n        <label className={styles.form_item}>\n          Number:\n          <input\n            type=\"tel\"\n            name=\"number\"\n            value={this.state.number}\n            onChange={this.onInputTelChange}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n          />\n        </label>\n        <button type=\"submit\" className={styles.button}>\n          Add contact\n        </button>\n      </form>\n    );\n  }\n};\nconst mapStateToProps = state => ({\n  contacts: contactsSelectors.getItems(state)\n});\nconst mapDispatchToProps = dispatch => ({\n  onSubmitProp: (name, number) => dispatch(operations.addContact(name, number))\n})\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\nForm.propTypes = {\n  onSubmitProp: PropTypes.func.isRequired,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../../redux/actions\";\nimport contactsSelectors from \"../../redux/selectors\"\nconst Finder = ({ value, onChange }) => {\n  return (\n    <>\n      <p>Find contacts by name</p>\n      <input type=\"text\" name=\"name\" value={value} onChange={onChange} />\n    </>\n  );\n};\nconst mapStateToProps = (state) => ({\n\n  value: contactsSelectors.getFilter(state),\n});\nconst mapDispatchToProps = dispatch => ({ onChange: (e) => dispatch(actions.filterContacts(e.currentTarget.value)) });\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Finder);\nFinder.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\n","import PropTypes from \"prop-types\";\n\nconst FormItem = ({ name, id, number, deleteItem }) => {\n  return (\n    <>\n      <li key={id}>\n        <p>\n          {name}: {number}\n        </p>\n      </li>\n      <button type=\"button\" onClick={deleteItem}>\n        Delete\n      </button>\n    </>\n  );\n};\nexport default FormItem;\nFormItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  deleteItem: PropTypes.func.isRequired,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport FormItem from \"../FormItem/FormItem\";\n// import * as actions from \"../../redux/actions\"\nimport contactsOperations from \"../../redux/operations\";\nimport contactsSelectors from \"../../redux/selectors\";\nimport { connect } from \"react-redux\";\nconst FormList = ({ contacts, deleteItem }) => {\n  return (\n    <ul>\n      {contacts.map(({ name, id, number }) => (\n        <FormItem\n          name={name}\n          id={id}\n          number={number}\n          deleteItem={() => deleteItem(id)}\n        />\n      ))}\n    </ul>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  contacts: contactsSelectors.getVisibleContacts(state),\n});\nconst mapDispatchToProps = (dispatch) => ({\n  deleteItem: (id) => dispatch(contactsOperations.deleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FormList);\nFormList.propTypes = {\n  contacts: PropTypes.array.isRequired,\n  deleteItem: PropTypes.func.isRequired,\n};\n","import \"./App.css\";\nimport { connect } from \"react-redux\";\nimport Form from \"./Components/Form/Form\";\nimport React, { Component } from \"react\";\nimport Finder from \"./Components/Finder/Finder\";\nimport FormList from \"./Components/FormList/FormList\";\nimport contactsOperations from \"./redux/operations\";\nimport contactsSelectors from \"./redux/selectors\"\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.fetchContacts();\n  }\n\n  render() {    \n    return (\n      <div className=\"App\">\n        {this.props.error && <h1>Oops something went wrong</h1>}\n        <Form />\n        {this.props.isLoadingContacts && <h1>Loading...</h1>}\n        <Finder />\n        <FormList />\n      </div>\n    );\n  }\n}\nconst mapStateToProps = (state) => ({\n  isLoadingContacts: contactsSelectors.getLoading(state),\n  error: contactsSelectors.getError(state)\n});\nconst mapDispatchToProps = (dispatch) => ({\n  fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\nimport \"./index.css\";\nimport App from \"./App\";\n// import { PersistGate } from 'redux-persist/integration/react'\nimport \"modern-normalize/modern-normalize.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\n        <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Form_form__mjIHY\",\"form_item\":\"Form_form_item__1xmW7\",\"button\":\"Form_button__J42zr\"};"],"sourceRoot":""}